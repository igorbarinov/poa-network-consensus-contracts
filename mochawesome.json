{
  "stats": {
    "suites": 51,
    "tests": 157,
    "passes": 157,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-14T03:40:25.784Z",
    "end": "2017-12-14T03:42:21.623Z",
    "duration": 115839,
    "testsRegistered": 157,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9ae4d45b-9773-4b54-9ad4-b2745258dbff",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d4bea997-c5ad-4b1a-adb5-9a9ad82adbec",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "b97e0b19-edf1-46aa-bc41-2309c520cf9c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "328014a5-920c-479c-97b2-848f8ca52bf6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9f474ac9-8181-497e-b835-0b95dfa758f4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4371988-687c-4502-b840-dfbadcffdca0",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "88592c9c-33fd-48ff-8603-fa0d6e9aa187",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7b395b1e-2ef6-4c9d-b1ab-8f8438eac18b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7367436b-54a8-4bde-801d-4da4d2e83461",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e00ae5f0-e9ac-47d1-a81a-3793e409aa1c",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a95f4cbc-58d0-4396-b437-0f5854dec6e2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "065873c9-2251-415a-99a5-91671e7a0f62",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "729b2440-6889-4841-a707-aefae85c0d38",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0463bf7f-92bf-4953-99e3-5259b70502a2",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "7d72315f-d96d-4c50-be67-8fd80649c505",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c100a2e4-c213-4f69-9b60-688bc1614376",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "70f78ad8-60f7-4084-bc4a-e435f3ad43e1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab54347a-b6b9-4ead-b7d5-eb01a93abc40",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "f5d916f1-52f6-4829-9b07-47f72a5d3701",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "debbd514-6c39-475d-abaa-7f935594597e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "be31872f-5c35-454a-a8c8-0a3bac86d041",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f07217eb-cc25-4d46-a135-7aab1dc466be",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "07d8964c-4d3c-41d6-8952-ae3eec279d94",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7d97b92f-32ba-49f7-bb2b-8a8081d11e2d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c382d252-19b9-4303-9e47-778e17225b66",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "66fc95d9-0341-460e-83dd-10c28df8ce8a",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "13565c7e-1cd3-4a33-b51d-d3d3a2b22004",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f0fad850-f9db-4247-84e3-1b63f4b2d1a6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e81b0c38-4b9a-40c9-a6b5-c653a2d05693",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "56191522-2b69-4515-9890-4b6e4f3e82aa",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "374d165e-34e4-4bc9-b3d1-7c66891187a9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f8970dbb-e24f-433d-b066-dd0d4bf2486e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ecc2e375-e731-40b3-bf1c-3c8421a71835",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2bd0814e-2850-4a11-965b-22b952516abe",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 60,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "305e414a-5c04-4002-a085-c9d18d5d4223",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "aa36b961-2195-4f2b-844f-4146896698b9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 268,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);\nballotsStorageMock = await BallotsStorageMock.new(proxyStorage.address);\nkeysManager = await KeysManagerMock.new(proxyStorage.address, poaNetworkConsensus.address, masterOfCeremony);\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(keysManager.address, votingToChangeKeys, votingToChangeMinThreshold, votingToChangeProxy, ballotsStorageMock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "09f37f3a-3288-4372-9693-a456d8ca8c5a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "47f7f7a5-6335-43a3-b4eb-508cd73e1930",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "32398ce4-bb9b-4870-b163-1177758fb7d2",
            "title": "#contstuctor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: BallotsStorage [all features] #contstuctor sets MoC and Poa",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0467c898-4100-48b0-a22d-e19a00de3502",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0467c898-4100-48b0-a22d-e19a00de3502"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 37,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9eaa1a5c-2584-482f-85a6-d1249426bb17",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3d7b1883-fe6e-47f5-9b69-bad57af86e12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 0, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -10, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, 3, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1b135d46-1d33-40fb-b706-55f059c5337b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(0, 1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(0, 2, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;\nawait ballotsStorageMock.setThreshold(4, 2, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1a3e3e84-2787-4af3-a6a5-9f67ad01b396",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 1, {from: accounts[3]}).should.be.fulfilled; \nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(1));",
                "err": {},
                "isRoot": false,
                "uuid": "7a064305-5e61-4a56-83ad-d9b20ea721c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(6, 2, {from: accounts[3]}).should.be.fulfilled;\nnew web3.BigNumber(6).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(2));",
                "err": {},
                "isRoot": false,
                "uuid": "779cc5b9-9816-46e2-b758-da3fc5bef837",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d7b1883-fe6e-47f5-9b69-bad57af86e12",
              "1b135d46-1d33-40fb-b706-55f059c5337b",
              "1a3e3e84-2787-4af3-a6a5-9f67ad01b396",
              "7a064305-5e61-4a56-83ad-d9b20ea721c6",
              "779cc5b9-9816-46e2-b758-da3fc5bef837"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 396,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "60c316cb-091c-4985-925a-2808dbac2c7b",
            "title": "#getTotalNumberOfValidators",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getTotalNumberOfValidators returns total number of validators",
                "timedOut": false,
                "duration": 161,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.setSystemAddress(masterOfCeremony);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(2).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorageMock.getTotalNumberOfValidators())",
                "err": {},
                "isRoot": false,
                "uuid": "9ccb7f9f-cefd-4767-b736-7c5db34d22d3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ccb7f9f-cefd-4767-b736-7c5db34d22d3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 161,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "27c0070d-6020-401e-bbe4-486914d24096",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold returns total number of validators",
                "timedOut": false,
                "duration": 403,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.addValidator(accounts[2]);\nawait poaNetworkConsensus.addValidator(accounts[3]);\nawait poaNetworkConsensus.addValidator(accounts[4]);\nawait poaNetworkConsensus.addValidator(accounts[5]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "e5ab807f-ac12-49f2-b5a7-fc5995765be9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5ab807f-ac12-49f2-b5a7-fc5995765be9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 403,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "69d50bea-1a75-4405-9ff9-3f06f4d09cff",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "ed90b947-f97c-4cba-8387-d2eed3e04284",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed90b947-f97c-4cba-8387-d2eed3e04284"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "12efbb6c-508a-473b-b998-319d273e75d2",
            "title": "#getBallotLimit",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns limit per validator to create ballots",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimit returns limit per validator to create ballots",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(200);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "5f3fbf1f-9652-4e35-956d-001733d2bf9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f3fbf1f-9652-4e35-956d-001733d2bf9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 193,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d6602f99-86f0-45e6-8bdf-87496eecadc1",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 266,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "27e71ae1-d518-4497-9436-e6086e855a7a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "801e0881-1bc7-41c7-ac3e-a29035291d8a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 199,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "45862d0e-d3fa-4dea-b5ee-a6813344fd62",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e9852470-7d5d-40bc-bf1d-b10c04f70007",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7a912606-6ea8-4652-94fa-d90994019f28",
            "title": "#constructor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus());",
                "err": {},
                "isRoot": false,
                "uuid": "d68e45a1-224e-4819-8a07-f59cf9a54427",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b38366c8-92ec-4605-8cb5-8c1ab950132a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d68e45a1-224e-4819-8a07-f59cf9a54427",
              "b38366c8-92ec-4605-8cb5-8c1ab950132a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 49,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9db8f28a-24b3-46f7-a4f3-62e59389833c",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8b4565ea-7ea9-4beb-bc03-f4844edc2f1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "27651af6-bf69-4e1f-8308-e6f6b766b6a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9a2f386d-9f24-407d-94b3-1508d7ce3f02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d2b301a1-adbe-4e92-b423-afa5ee8b4e18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8c9886b8-d451-498c-8fbb-f870f3392109",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setMaxNumberOfInitialKeys(2);\nlet maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(2);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[3], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a72f4fc9-c501-4eb8-8802-0bcb0c5d20f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 432,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5b2017df-dfdf-4bfc-889d-93bddf9d935a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "6e6ca019-d8c1-4685-94b3-a54691f9377d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "e992a430-bf15-4729-8690-5dd11dc3d008",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b4565ea-7ea9-4beb-bc03-f4844edc2f1f",
              "27651af6-bf69-4e1f-8308-e6f6b766b6a3",
              "9a2f386d-9f24-407d-94b3-1508d7ce3f02",
              "d2b301a1-adbe-4e92-b423-afa5ee8b4e18",
              "8c9886b8-d451-498c-8fbb-f870f3392109",
              "a72f4fc9-c501-4eb8-8802-0bcb0c5d20f2",
              "5b2017df-dfdf-4bfc-889d-93bddf9d935a",
              "6e6ca019-d8c1-4685-94b3-a54691f9377d",
              "e992a430-bf15-4729-8690-5dd11dc3d008"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 961,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fe89c59b-6095-4e5e-97d1-46a7a3074bb3",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "076414e3-a0a5-4a04-800f-96a5dae8791b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ebac1767-5061-4a88-bd63-b7eab63961ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a6edcadc-3146-4cbd-bd82-af1b019a5099",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "9adb2918-ce21-4a44-95de-97bd1fb0f818",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assigns voting <-> mining key relationship",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assigns voting <-> mining key relationship",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[3]);\nminingKey.should.be.equal(accounts[4]);",
                "err": {},
                "isRoot": false,
                "uuid": "b8410bb6-b374-4f37-8f0b-975e6929523a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.currentValidatorsLength();\n(await poaNetworkConsensusMock.pendingList(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2b05b865-c871-4e79-8c70-4fa927d2ad33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "e7087b1a-5d2e-4a89-a586-ab2103a892ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "0c0db2e7-cfaa-441b-9048-90e85bf7827b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "076414e3-a0a5-4a04-800f-96a5dae8791b",
              "ebac1767-5061-4a88-bd63-b7eab63961ea",
              "a6edcadc-3146-4cbd-bd82-af1b019a5099",
              "9adb2918-ce21-4a44-95de-97bd1fb0f818",
              "b8410bb6-b374-4f37-8f0b-975e6929523a",
              "2b05b865-c871-4e79-8c70-4fa927d2ad33",
              "e7087b1a-5d2e-4a89-a586-ab2103a892ae",
              "0c0db2e7-cfaa-441b-9048-90e85bf7827b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 761,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1e9e4416-44be-417e-9828-98bb863de2b9",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8a379a48-d049-4d73-bc21-bd0595909ace",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait keysManager.addMiningKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0696d432-895d-409c-9a68-234472a15733",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "20d972fb-ee60-4ae8-b2cc-668a1f14a675",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a379a48-d049-4d73-bc21-bd0595909ace",
              "0696d432-895d-409c-9a68-234472a15733",
              "20d972fb-ee60-4ae8-b2cc-668a1f14a675"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 207,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "803c534e-5b9f-438d-85be-1bff573a134f",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2],accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "0151edc0-ec60-455e-994e-5453f831d509",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4ffab9b0-a547-4012-bf39-98fd6c03fb01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 161,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nfalse.should.be.equal(await keysManager.isVotingActive(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[3]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "00d40b5b-a066-4a38-bf34-3c148e2907a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0151edc0-ec60-455e-994e-5453f831d509",
              "4ffab9b0-a547-4012-bf39-98fd6c03fb01",
              "00d40b5b-a066-4a38-bf34-3c148e2907a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 403,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "32197694-5937-48d0-9974-ff2a85e32e3d",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addPayoutKey(accounts[2],accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "fe8205e3-f712-4d0f-a9a5-33ee4bc2a446",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7f7a4161-915d-4d85-a797-2c7b2b1e9cd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isPayoutActive(accounts[1]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1bc1fc16-2ca2-4b65-bdf1-e09f89a6c7f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe8205e3-f712-4d0f-a9a5-33ee4bc2a446",
              "7f7a4161-915d-4d85-a797-2c7b2b1e9cd0",
              "1bc1fc16-2ca2-4b65-bdf1-e09f89a6c7f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 395,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d5be48e1-3a6f-4933-8194-8fe92999e6e3",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "2df4231d-c5f1-4ed3-92e5-09ae8278eb6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensusMock.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.currentValidatorsLength();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "24d2af80-8e76-4d48-80ca-62ae0407b351",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "3ce1229d-f102-4428-81d5-596217789b79",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2df4231d-c5f1-4ed3-92e5-09ae8278eb6d",
              "24d2af80-8e76-4d48-80ca-62ae0407b351",
              "3ce1229d-f102-4428-81d5-596217789b79"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 650,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0ef9d3b8-a2ca-43c1-9b5e-2ced21f709f0",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(mining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, mining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, mining).should.be.fulfilled;\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[1]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "c3ab3520-5065-4c9d-a9a6-ca9532e35f41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3ab3520-5065-4c9d-a9a6-ca9532e35f41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 194,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "edc6e098-0f5e-4b29-8cfe-27faa33c664c",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "398c1c43-bc87-450c-bb20-43a3db1fc5cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "398c1c43-bc87-450c-bb20-43a3db1fc5cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 173,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "23f051c5-f846-49e9-a89d-1985fcbfee85",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.swapMiningKey(accounts[2], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(accounts[2]);\nvalidatorNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8337a44a-36a4-4d28-b8d7-a61b326a8631",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8337a44a-36a4-4d28-b8d7-a61b326a8631"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 198,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3de0c029-a27b-419a-9ff1-3e01c6fc883a",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2b3859db-0bda-48ae-a30b-515708e11161",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2b3859db-0bda-48ae-a30b-515708e11161"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 163,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "26761902-7246-49f0-8c85-6c48663ab072",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6a2bbbfb-cacd-4ff8-84b6-2428773dd603",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a2bbbfb-cacd-4ff8-84b6-2428773dd603"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 143,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cb7c1042-16f8-4e1a-8432-d55f9bfe28f9",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 698,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c720c33e-bd0e-468b-b127-71153573cde9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "917fe577-aa12-4a6f-87c0-30af5be98ee3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 487,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   await proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, masterOfCeremony, ballotsStorage.address);\n   metadata = await ValidatorMetadata.new(proxyStorageMock.address);\n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "06a164ed-604c-4b91-bf5c-e1277da03be1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e1c34da4-2ccc-4cd9-a2df-1acf66567ca9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "3af36714-5cf8-43bf-94d3-12d43086173b",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f44e75c7-57aa-441d-a0b3-40fa30e2ccd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n])",
                "err": {},
                "isRoot": false,
                "uuid": "286a4508-132d-460e-8823-1b323188e120",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5e4a51a1-e3f4-46cf-b809-184fb7362f10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f44e75c7-57aa-441d-a0b3-40fa30e2ccd3",
              "286a4508-132d-460e-8823-1b323188e120",
              "5e4a51a1-e3f4-46cf-b809-184fb7362f10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 260,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "80fb1bf9-401f-46ef-bc13-8b6a0c6006cc",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "b18f5be5-c8fd-4f89-a8e8-cc988572b5bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b18f5be5-c8fd-4f89-a8e8-cc988572b5bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 43,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e70041b1-4368-4a93-b7e8-94aa0208a68b",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 63,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "78e87bc3-bd2a-4f8f-affa-afc774385d22",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\npendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2c642eea-3418-47a4-951f-cf2eae8d8212",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "edfc4837-0d69-4c9b-b587-4cea7d0203a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "miningKey3 = accounts[5];\nvotingKey3 = accounts[6];\nawait keysManager.addMiningKey(miningKey3).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(2);\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(0);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "decc226e-eac3-4eed-82f3-ef14102ce271",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c642eea-3418-47a4-951f-cf2eae8d8212",
              "edfc4837-0d69-4c9b-b587-4cea7d0203a6",
              "decc226e-eac3-4eed-82f3-ef14102ce271"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 485,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "35c3f57b-d609-4b91-91e9-ec6f814c601a",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 314,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "e437accf-958c-43c5-b6d6-a53a010e852c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 243,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])",
                "err": {},
                "isRoot": false,
                "uuid": "eb07ac11-5545-40bf-a4b0-c3e8b0ae286d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e437accf-958c-43c5-b6d6-a53a010e852c",
              "eb07ac11-5545-40bf-a4b0-c3e8b0ae286d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "503bd044-1dff-459d-bee2-98453ad03b86",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d4d56d0e-e689-4f78-87f6-81cea76e7947",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "1106c8e0-0e6a-4f7b-83dd-b1b28993e201",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "67c3409a-b289-4784-8628-eade856c6597",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4d56d0e-e689-4f78-87f6-81cea76e7947",
              "1106c8e0-0e6a-4f7b-83dd-b1b28993e201",
              "67c3409a-b289-4784-8628-eade856c6597"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 532,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1247f3a8-17c2-4c99-ae17-faf30e12e3d0",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 466,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "miningKey3 = accounts[5];\nvotingKey3 = accounts[6];\nawait keysManager.addMiningKey(miningKey3).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "76bd8094-2804-47da-8888-c1551f83fc70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76bd8094-2804-47da-8888-c1551f83fc70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 466,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "51217845-4516-4ff0-8511-1f7f93e00913",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "bc2fa42d-a441-4e96-9f7b-958affa51a8a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc2fa42d-a441-4e96-9f7b-958affa51a8a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0c14b29b-9edb-4b9a-8dec-4c6fb9ea2d6b",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 469,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c8eba954-7550-4f79-9930-bd6465882872",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f9667b44-417b-4ed6-85f1-4fc67419f709",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 138,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "c04d77ed-a242-4828-892e-b73ac09d67e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e55db2c6-1a9a-42a7-85ae-58481936c053",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "00a76aba-300b-4604-9af3-a80c1ed9f39d",
            "title": "default values",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators();\nlet finalized = await poaNetworkConsensus.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "f469b120-c56f-4111-bc2e-b17a284c5a84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "228ffa6d-fc76-42f5-ad41-f330937e9c78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f469b120-c56f-4111-bc2e-b17a284c5a84",
              "228ffa6d-fc76-42f5-ad41-f330937e9c78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "da0e714e-dd20-45a1-8204-3a8fb906db47",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "84a184ee-810c-48f3-8a6e-cf249c4af4d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "a7641f2d-9f43-4996-88f7-806eed8f89e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "2da373ab-4180-4037-8bbe-de7494696b72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 303,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait poaNetworkConsensus.addValidator(accounts[2]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "5125c494-fa99-47a5-8866-f285ea64af98",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84a184ee-810c-48f3-8a6e-cf249c4af4d1",
              "a7641f2d-9f43-4996-88f7-806eed8f89e9",
              "2da373ab-4180-4037-8bbe-de7494696b72",
              "5125c494-fa99-47a5-8866-f285ea64af98"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 532,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "31b637ca-fa77-4295-a8ad-d4a13e3c7996",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait poaNetworkConsensus.addValidator(accounts[1], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fc5a0b1c-3661-4143-922c-886af79aff33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dcd92ded-00aa-4515-b236-07e247ffc666",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator('0x0').should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "751b514f-c810-4ebe-8aee-cb6f0625c514",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet state = await poaNetworkConsensus.validatorsState(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList();\nstate[0].should.be.true;\nstate[1].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "f7274c36-ed6e-452a-8e30-9b4bcb1bba0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "9bda7392-0329-49bb-b3be-59d0e7707ff5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "e892646b-9dcc-4ad5-a86c-32863dd647a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc5a0b1c-3661-4143-922c-886af79aff33",
              "dcd92ded-00aa-4515-b236-07e247ffc666",
              "751b514f-c810-4ebe-8aee-cb6f0625c514",
              "f7274c36-ed6e-452a-8e30-9b4bcb1bba0c",
              "9bda7392-0329-49bb-b3be-59d0e7707ff5",
              "e892646b-9dcc-4ad5-a86c-32863dd647a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 418,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4e571ba6-80a8-4c68-96be-f28817c7aae0",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "abaedc0c-12c8-46b1-959f-1be74beedcdc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.removeValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c4fbf873-1f41-4a96-83ba-9ecb4f29e8e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d9954604-1c83-448d-b6d4-77963310db3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[2]).should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "91e13bde-4eab-48c6-8f45-2e1ac69677f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nconst state = await poaNetworkConsensus.validatorsState(accounts[1]);\nstate[0].should.be.false;\nstate[1].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "169c6039-b067-4f95-9f20-6390c15f447d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nconst finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "e50f280f-4d26-4177-974f-61addeed52bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abaedc0c-12c8-46b1-959f-1be74beedcdc",
              "c4fbf873-1f41-4a96-83ba-9ecb4f29e8e4",
              "d9954604-1c83-448d-b6d4-77963310db3a",
              "91e13bde-4eab-48c6-8f45-2e1ac69677f5",
              "169c6039-b067-4f95-9f20-6390c15f447d",
              "e50f280f-4d26-4177-974f-61addeed52bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 737,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "28453c76-eadc-46fd-8090-eff8c8b2c5ec",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from masterOfCeremony",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called from masterOfCeremony",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5]).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: new_masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "dfe5f66f-4628-4746-a522-68802eefb44e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(accounts[5]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "45bea96a-7cca-47a2-9982-09183836ca73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: new_masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bc881284-cdce-41ca-946d-1e76837a3abd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "b6a36b23-226b-43de-a07c-85701a22ed82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets isMasterOfCeremonyInitialized",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets isMasterOfCeremonyInitialized",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyInitialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "63f8b20c-46e4-46b6-baad-517d0f509e6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "6d854106-6f08-4a65-a791-9ecfdaa933fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "644220ce-7c12-4be2-8012-323c4b36dc53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getVotingToChangeKeys",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getVotingToChangeKeys",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newVotingToChangeKeys = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setVotingContractMock(newVotingToChangeKeys);\n(await poaNetworkConsensus.getVotingToChangeKeys()).should.be.equal(newVotingToChangeKeys);",
                "err": {},
                "isRoot": false,
                "uuid": "82f9bbc5-0666-44d9-870b-409f48950f73",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfe5f66f-4628-4746-a522-68802eefb44e",
              "45bea96a-7cca-47a2-9982-09183836ca73",
              "bc881284-cdce-41ca-946d-1e76837a3abd",
              "b6a36b23-226b-43de-a07c-85701a22ed82",
              "63f8b20c-46e4-46b6-baad-517d0f509e6d",
              "6d854106-6f08-4a65-a791-9ecfdaa933fe",
              "644220ce-7c12-4be2-8012-323c4b36dc53",
              "82f9bbc5-0666-44d9-870b-409f48950f73"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 475,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7a6994f8-bf56-4e29-8d37-f32f6e7a0680",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns address of miner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns address of miner",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "69b86e6b-50ba-4f04-8f76-6e4caaf18a4f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69b86e6b-50ba-4f04-8f76-6e4caaf18a4f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7af04e17-4c13-4b80-b76b-1cc00e53521a",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 438,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "1d775e40-9ef6-4fc5-8d8c-810990dbdf49",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6b47fe28-6854-4db9-b626-54e1b89aedcd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 75,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "3c68a5a5-be9c-41f5-aa16-dcba60f09aad",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "75728401-0e6f-475d-a38e-be7d4b4ac1de",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "44c252c9-de50-404d-8bc6-6172fa26c76d",
            "title": "#contstuctor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: ProxyStorage [all features] #contstuctor sets MoC and Poa",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(\n  await proxyStorage.masterOfCeremony()\n);\npoaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a39365eb-7c92-4461-a211-ce0b73510d14",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a39365eb-7c92-4461-a211-ce0b73510d14"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6bd0e72a-a3cc-4c71-aab1-c9d974978430",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(keysManager,\n   votingToChangeKeys,\n   votingToChangeMinThreshold,\n   votingToChangeProxy,\n   ballotsStorage, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(keysManager,\n   votingToChangeKeys,\n   votingToChangeMinThreshold,\n   votingToChangeProxy,\n   ballotsStorage).should.be.fulfilled;\nkeysManager.should.be.equal(\n  await proxyStorage.getKeysManager()\n);\nvotingToChangeKeys.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n);\nvotingToChangeMinThreshold.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n);\nvotingToChangeProxy.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n);\nballotsStorage.should.be.equal(\n  await proxyStorage.getBallotsStorage()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManager.should.be.equal(keysManager);\nlogs[0].args.votingToChangeKeys.should.be.equal(votingToChangeKeys);\nlogs[0].args.votingToChangeMinThreshold.should.be.equal(votingToChangeMinThreshold);\nlogs[0].args.votingToChangeProxy.should.be.equal(votingToChangeProxy);\nlogs[0].args.ballotsStorage.should.be.equal(ballotsStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "86b5d962-dc96-4c3a-ac52-7cd034da6e6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized());\nconst {logs} = await proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized());\nawait proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c975576-902f-4f62-a163-b1b6d0669c92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86b5d962-dc96-4c3a-ac52-7cd034da6e6b",
              "3c975576-902f-4f62-a163-b1b6d0669c92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e9af7d13-2abd-44f6-99e7-21a4517042c7",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 31,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage, {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "27cacad9-5f75-488f-9c40-c7faf0dd1a43",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeKeys}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3434e415-003b-451f-81fb-59e13e9fda8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, '0x0000000000000000000000000000000000000000', {from: votingToChangeProxy}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0bddaad2-e088-4d85-8262-12ddfb8bbec1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getKeysManager()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "76dd4b62-ee9d-4aaa-bd06-befe78b2d1d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(2, accounts[1], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[1].should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1794051f-156a-4a7b-af7b-1242f1c76460",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(3, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "05eaf24d-304c-427e-aa7e-896b18ac1d97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeProxy",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeProxy",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(4, accounts[3], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[3].should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8c0b8209-6c51-4436-91b1-16930362430a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(5, accounts[4], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[4].should.be.equal(\n  await proxyStorage.getBallotsStorage()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1bf195f2-b59f-471d-8641-883a3010f296",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3434e415-003b-451f-81fb-59e13e9fda8f",
              "0bddaad2-e088-4d85-8262-12ddfb8bbec1",
              "76dd4b62-ee9d-4aaa-bd06-befe78b2d1d5",
              "1794051f-156a-4a7b-af7b-1242f1c76460",
              "05eaf24d-304c-427e-aa7e-896b18ac1d97",
              "8c0b8209-6c51-4436-91b1-16930362430a",
              "1bf195f2-b59f-471d-8641-883a3010f296"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 254,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e19ed761-cc9a-4f3e-b3d2-b9d4c652fc97",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 127,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e0408ce9-6cdd-4886-bd44-d52dfdff819b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "73166088-3811-4aae-963e-a4fe3206a55a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 272,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, voting.address, masterOfCeremony, masterOfCeremony, ballotsStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "daee4a3e-778c-405b-984e-7510964a0da6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "906ef8d2-1328-4d2f-8715-42cc60992f5e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b50a66ae-3a0f-40a2-9e21-4ffa5dd8ce9d",
            "title": "#constructor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor happy path",
                "timedOut": false,
                "duration": 248,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(30, 'years').unix();\nconst id = await voting.nextBallotId();\nconst {logs} = await voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "8a085ab9-8200-4c32-84c7-11cb173da507",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let VOTING_START_DATE = moment.utc().add(30, 'years').unix();\nlet VOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a95feebf-759b-4b27-a71c-183dc3c6294a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 7783,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey});\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "60ce4d23-1ea6-4627-b6b3-db00e4f3a508",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a085ab9-8200-4c32-84c7-11cb173da507",
              "a95feebf-759b-4b27-a71c-183dc3c6294a",
              "60ce4d23-1ea6-4627-b6b3-db00e4f3a508"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1040cb42-04d7-43a2-886f-f9dfc0ef4c0a",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 212,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[1], 1, {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "e79342af-4eaa-4169-b8d3-f2fbc5400b5f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "12a011ed-22ea-4630-a715-1da80b6bb642",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "bda1d89b-f968-4776-961d-6529977a6d34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 506,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "b7bbf26d-82f0-4bb2-8dec-42aee4c5a3dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2eb1bf40-0def-486a-8d55-9605c2f92650",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cea2d996-40a6-438c-84c5-770f97ba8f1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d25def9e-6171-4fad-b2bc-107d02030800",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "060d50c4-7192-4aa1-ab56-26aeb0133d86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "78fdc032-a485-4794-99c1-816d0fc7fa3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "657aeebf-f778-454c-be28-5925fab34e91",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12a011ed-22ea-4630-a715-1da80b6bb642",
              "bda1d89b-f968-4776-961d-6529977a6d34",
              "b7bbf26d-82f0-4bb2-8dec-42aee4c5a3dc",
              "2eb1bf40-0def-486a-8d55-9605c2f92650",
              "cea2d996-40a6-438c-84c5-770f97ba8f1f",
              "d25def9e-6171-4fad-b2bc-107d02030800",
              "060d50c4-7192-4aa1-ab56-26aeb0133d86",
              "78fdc032-a485-4794-99c1-816d0fc7fa3c",
              "657aeebf-f778-454c-be28-5925fab34e91"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1313,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6f452dc3-2089-4682-afc5-5109b6d26bea",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 292,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "09e633b7-f361-4395-9fe6-55bd8c81563a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it didnot meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it didnot meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, payoutKeyToAdd, 3, accounts[1], 1, {from: votingKey});\nlet activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 1);\n// console.log(votingId);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    payoutKeyToAdd, //address affectedKey\n    new web3.BigNumber(3), //uint256 affectedKeyType\n    accounts[1],            //address miningKey\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(-1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(1),  //uint256 ballotType\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    miningKeyForVotingKey   // miningKeyCreator\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "0df55b11-ff1c-45dd-8d22-fe3a6d9d9880",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 509,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ac0d6c74-ad43-45a6-997c-6c3018426c63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 580,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[5];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "dfd7d865-8181-4395-a355-0c9b1547c6fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 1318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, miningKey, 1, accounts[5], 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e05e5fa3-e253-41d1-81a3-17a54c323815",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 689,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "ac8519d8-fa3a-4d19-b285-74140dddcb74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 690,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "35792898-3a5a-466c-9868-00da5584aaea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 639,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet votingKeyToAdd = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKeyToAdd, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "c89ca859-8921-401f-ae10-80f48390aec7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 770,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "43276b3f-b6a1-4316-8266-4d3eb5079483",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 626,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ affectedKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8373ee57-9ffc-4e89-b515-5f33f410ad02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 622,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  affectedKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "24d21da4-268c-4f4b-9556-23bdce1610e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 801,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "912f9987-5c6c-4842-9b9f-9e30812be16a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1041,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, affectedKey, 1, miningKey, 3, {from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE+2, VOTING_END_DATE+2, affectedKey, 1, miningKey, 2, {from: votingKey});\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "e380e965-254a-44c2-b7eb-2ddf9e75aea2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0df55b11-ff1c-45dd-8d22-fe3a6d9d9880",
              "ac0d6c74-ad43-45a6-997c-6c3018426c63",
              "dfd7d865-8181-4395-a355-0c9b1547c6fb",
              "e05e5fa3-e253-41d1-81a3-17a54c323815",
              "ac8519d8-fa3a-4d19-b285-74140dddcb74",
              "35792898-3a5a-466c-9868-00da5584aaea",
              "c89ca859-8921-401f-ae10-80f48390aec7",
              "43276b3f-b6a1-4316-8266-4d3eb5079483",
              "8373ee57-9ffc-4e89-b515-5f33f410ad02",
              "24d21da4-268c-4f4b-9556-23bdce1610e1",
              "912f9987-5c6c-4842-9b9f-9e30812be16a",
              "e380e965-254a-44c2-b7eb-2ddf9e75aea2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8647,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c05dfe05-6311-4b70-bab1-5ea4d04c267c",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1249,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "4bceaf61-df16-4084-b280-86bd66aa7676",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2b483d50-43e2-4c02-af50-2030cc082be7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 819,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await Voting.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, voting.address, masterOfCeremony, ballotsStorage.address);\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[5]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[7]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "db6deb10-52d0-49d9-a696-bfc1a0f38b96",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "90ec892d-e64c-45a0-b973-f626268ffbaa",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b9265288-a367-487e-93f9-70ad5992c5f3",
            "title": "#createBallotToChangeThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold \"before each\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "06dad474-e7a2-4995-b947-4348712fa3ba",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold happy path",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  new web3.BigNumber(4),\n  miningKeyForVotingKey\n])\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "74652845-9cf1-4c3f-9044-547078b76a3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 2, {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8f2ecddc-dbd7-4eb0-aed9-b85bebea097d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 3, {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c94994de-3d93-4696-be1c-73d1b3a0a411",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});\n// we have 7 validators, so 200 limit / 7 = 28.5 ~ 28\nnew web3.BigNumber(28).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "bf7d9bf6-b098-4428-a556-8a9ddf59238f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74652845-9cf1-4c3f-9044-547078b76a3e",
              "8f2ecddc-dbd7-4eb0-aed9-b85bebea097d",
              "c94994de-3d93-4696-be1c-73d1b3a0a411",
              "bf7d9bf6-b098-4428-a556-8a9ddf59238f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8232,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "81a59772-63a6-4748-abaa-eacb10e8314d",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 136,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();\nlet fiftyOnePercent = await ballotsStorage.getProxyThreshold();\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "74db9793-5455-42d4-ab07-772a64b640bc",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "55918edd-ec8d-4466-b399-644e4eff7432",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "d91b5b1e-d94d-4e1e-98f6-2a52436a3264",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "ce36cb1e-3520-4f99-afd9-845e0e8b9fd6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7aac4565-b97b-42d2-9a5c-1e1dc9d631bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "daf2b724-e0fc-4681-9192-69af69476534",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c3b2187-8deb-4941-8907-6e844a53b26d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d3111596-c2c2-48ac-b40c-01f51e432410",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "81b408e2-8038-4d80-9154-4506f77ba0a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f206f248-620d-4ec3-9b5f-ae0ec2a4c487",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "55918edd-ec8d-4466-b399-644e4eff7432",
              "d91b5b1e-d94d-4e1e-98f6-2a52436a3264",
              "ce36cb1e-3520-4f99-afd9-845e0e8b9fd6",
              "7aac4565-b97b-42d2-9a5c-1e1dc9d631bd",
              "daf2b724-e0fc-4681-9192-69af69476534",
              "3c3b2187-8deb-4941-8907-6e844a53b26d",
              "d3111596-c2c2-48ac-b40c-01f51e432410",
              "81b408e2-8038-4d80-9154-4506f77ba0a6",
              "f206f248-620d-4ec3-9b5f-ae0ec2a4c487"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1034,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "473a4708-270f-4e18-bbd2-48dae9c3885d",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "ccbe903f-c80e-4d20-81c0-0146e3dfb254",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 336,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey  // creator\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "94760b46-8e5a-4dce-aa94-32308347572e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 730,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(3),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(2),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey  //creator\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new(proxyStorageMock.address);\n\nlet nextId = await votingForKeys.nextBallotId();\nawait votingForKeys.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 3, accounts[1], 1, {from: votingKey});\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "995fe570-ef59-44c3-9ff4-86edc4219c6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 917,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, {from: votingKey});\n      \nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\").should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, {from: votingKey});\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "0042c10c-933d-43c1-bdb1-d14c7859d282",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94760b46-8e5a-4dce-aa94-32308347572e",
              "995fe570-ef59-44c3-9ff4-86edc4219c6b",
              "0042c10c-933d-43c1-bdb1-d14c7859d282"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1983,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0537a2b1-4593-422b-9eeb-ddc0a9f918ba",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 980,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3d6b7fad-b84f-4854-ac13-bdebaaa093ad",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "981e1b2c-f106-49c3-b5e5-394ea14ff684",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 259,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddress.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, voting.address, ballotsStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "9f264298-1d7a-4882-b0ea-686c057f65bd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8454ff38-4cc3-46db-84c8-8837c63a19ab",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4cce39d6-6a4f-4890-b1bb-ccf2c14d1494",
            "title": "#createBallotToChangeProxyAddress",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress \"before each\" hook",
                "timedOut": false,
                "duration": 97,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "07b431a5-68a9-4bae-8310-f7faa30beae6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress happy path",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// uint256 _startTime,\n// uint256 _endTime,\n// address _proposedValue,\n// uint8 _contractType\nconst { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(1),\n  miningKeyForVotingKey        \n])\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "8c306403-e6c0-4a09-893c-6ec05bdf427c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress proposed address should not be 0x0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', 2, { from: votingKey }).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b847451d-4e26-4368-b9a8-d150892a856e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can creates multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress can creates multiple ballots",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\n\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE + 1, VOTING_END_DATE + 1, accounts[5], 2, { from: votingKey });\nlet votingState = await voting.votingState(nextBallotId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1),\n  new web3.BigNumber(VOTING_END_DATE+1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(2),\n  miningKeyForVotingKey\n])",
                "err": {},
                "isRoot": false,
                "uuid": "28665b44-c4f2-4386-9a45-f2cc63672aab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 7606,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, {from: votingKey});\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, {from: votingKey});\n// we have 7 validators, so 200 limit / 7 = 28.5 ~ 28\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "42d8e6e0-53ef-485e-86c2-e3715a0e3772",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c306403-e6c0-4a09-893c-6ec05bdf427c",
              "b847451d-4e26-4368-b9a8-d150892a856e",
              "28665b44-c4f2-4386-9a45-f2cc63672aab",
              "42d8e6e0-53ef-485e-86c2-e3715a0e3772"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8065,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e7b15f75-bb0e-41de-b064-088f706c9dfd",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 182,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });",
                "err": {},
                "isRoot": false,
                "uuid": "3211367b-db31-479f-b49d-2378c0d50824",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "c049bdcc-44db-4ccb-b903-5091320092a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "555f11b7-63ab-4d21-b37e-998080c9bd17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 554,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "bd33080e-4d6e-4e10-82fc-7ac9dac45b09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9d9a79f0-525d-438a-85ab-77e0f238ac49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dd98c89c-da5b-4624-be52-a4dafd616d45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "95ae316c-fe4f-443c-85d3-062b72ff2a01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c6245c2-cd24-446d-a7d8-0d2e1e2daa1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "df221ff2-87ee-49ce-8798-67b7515354e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e66647d2-b1e3-4572-8eaa-4f9e5e32d697",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c049bdcc-44db-4ccb-b903-5091320092a1",
              "555f11b7-63ab-4d21-b37e-998080c9bd17",
              "bd33080e-4d6e-4e10-82fc-7ac9dac45b09",
              "9d9a79f0-525d-438a-85ab-77e0f238ac49",
              "dd98c89c-da5b-4624-be52-a4dafd616d45",
              "95ae316c-fe4f-443c-85d3-062b72ff2a01",
              "3c6245c2-cd24-446d-a7d8-0d2e1e2daa1f",
              "df221ff2-87ee-49ce-8798-67b7515354e3",
              "e66647d2-b1e3-4572-8eaa-4f9e5e32d697"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1365,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ad8fff9b-a7e9-4c1f-bfb4-882a55ff468e",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 351,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "41fb7331-1ef0-4f4b-9c51-9d2ac60c5e24",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], contractType, { from: votingKey });\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey }).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(3), //minThreshold\n  accounts[5], //porposedValue\n  new web3.BigNumber(contractType),\n  miningKeyForVotingKey //creator\n])\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "282e5b65-85a1-4169-985a-7317dc6b8202",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getKeysManager address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getKeysManager address",
                "timedOut": false,
                "duration": 505,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getKeysManager());",
                "err": {},
                "isRoot": false,
                "uuid": "f6af31ca-8871-485a-9c2c-3f4d3b078f22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeKeys",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeKeys",
                "timedOut": false,
                "duration": 537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeKeys());",
                "err": {},
                "isRoot": false,
                "uuid": "8aed47d1-1ceb-4fb5-95ae-53b77de6d08c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeMinThreshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeMinThreshold",
                "timedOut": false,
                "duration": 581,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeMinThreshold());",
                "err": {},
                "isRoot": false,
                "uuid": "0f5afaa9-bacb-4f4c-93ff-b1a33bcda101",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeProxy",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeProxy",
                "timedOut": false,
                "duration": 549,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeProxy());",
                "err": {},
                "isRoot": false,
                "uuid": "363410da-4df0-4265-aaa8-2c5daf134e98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getBallotsStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getBallotsStorage",
                "timedOut": false,
                "duration": 530,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getBallotsStorage());",
                "err": {},
                "isRoot": false,
                "uuid": "c8f4d8f2-e488-49ff-9be8-81622bd7c1ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 819,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 4;\nlet contractType2 = 5;\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, newAddress1, contractType1, { from: votingKey });\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE+2, VOTING_END_DATE+2, newAddress2, contractType2, { from: votingKey });\n  \nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))\nlet votingState1 = await voting.votingState(votingId);\nvotingState1.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(3), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(2), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(3), //minThreshold\n  newAddress1, //proposedValue\n  new web3.BigNumber(contractType1),\n  miningKeyForVotingKey //creator\n])\nlet votingState2 = await voting.votingState(votingIdForSecond);\nvotingState2.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2),\n  new web3.BigNumber(VOTING_END_DATE+2),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(-1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(3), //minThreshold\n  newAddress2, //proposedValue\n  new web3.BigNumber(contractType2),\n  miningKeyForVotingKey //creator\n])",
                "err": {},
                "isRoot": false,
                "uuid": "3e94e816-1f6b-448e-9dff-a7515eefe5f9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "282e5b65-85a1-4169-985a-7317dc6b8202",
              "f6af31ca-8871-485a-9c2c-3f4d3b078f22",
              "8aed47d1-1ceb-4fb5-95ae-53b77de6d08c",
              "0f5afaa9-bacb-4f4c-93ff-b1a33bcda101",
              "363410da-4df0-4265-aaa8-2c5daf134e98",
              "c8f4d8f2-e488-49ff-9be8-81622bd7c1ba",
              "3e94e816-1f6b-448e-9dff-a7515eefe5f9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3826,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2017
}